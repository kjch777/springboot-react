<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="todo.mapper.TodoMapper">
	<select id="idCheck">
		SELECT COUNT(*) FROM TODO_MEMBER
		WHERE ID = #{id}
	</select>
	
	<insert id="signup">
		INSERT INTO TODO_MEMBER
		VALUES(SEQ_TODO_MEMBER_NO.NEXTVAL, #{id}, #{pw}, #{name})
	</insert>
	
	<select id="login" resultType="TodoMember">
		SELECT * FROM TODO_MEMBER
		WHERE ID = #{id}
		AND PW = #{pw}
	</select>
	
	<!-- selectTodoList 할 일 목록 전체 보는 mapper -->
	<!-- 한명이 아닌 여러명의 사용자가, TODO 테이블에 작성한 수 많은 할 일이 있다.
	     todoMemberNo ◀ 특정 사용자의 번호와 연동하여, 해당 사용자의 할 일만 보여주겠다는 코드이다.
	     ORDER BY 1 ◀ 첫번째 열을 기준으로 정렬하라는 코드이다.
	     첫번째 열이 어떤 열인지는, TODO 테이블의 열 순서에 따라 다르다.
	     주로, 특정 사용자의 할 일 목록을 DB 에서 가져와, 특정한 순서로 정렬 후 표시할 때 사용한다. -->
	<select id="selectTodoList" resultType="Todo">
		SELECT * FROM TODO
		WHERE TODO_MEMBER_NO = #{todoMemberNo}
		ORDER BY 1
	</select>
	
	<!-- DB 에 있는 TODO 테이블에서, 해당 번호를 가진 할 일이 완료됐는지, isDone 으로 완료 여부를 수정하는 것이다. -->
	<update id="update">
		UPDATE TODO 
		SET IS_DONE = #{isDone}
		WHERE TODO_NO = ${todoNo}
	</update>
	
	<delete id="delete">
		DELETE FROM TODO
		WHERE TODO_NO = ${todoNo}
	</delete>
	
	<!-- 할 일 추가하는 insert
	     insert 로 특정 값을 DB 에 넣기 전에, 해당하는 값을 미리 가져와서 확인하는 것이다.
	     useGeneratedKeys == 자동으로 생성된 Key 를 사용하도록 설정하는 것
	     selectKey order="BEFORE" == insert 문이 실행되기 전에 select 문을 실행하겠다는 설정이다.
	     resultType="_int" == "int" ◀ 둘 다 int 타입으로 지정된다는 의미이다.
	     
	     SEQ_TODO_NO.NEXTVAL ◀ 특정 번호를 작성할 때, 다수가 동시에 접속하여 회원가입을 진행하게 되면
	     회원가입 버튼을 누를 때, 해당 번호를 사용해도 되는지 사용 유무를 확인한 다음 insert 를 진행하는 것이다.
	     keyProperty == 선택된 값이 사용될 속성명
	     
	     위 조회가 종료된 다음, insert 를 진행하는 것이다.
	     
	     ${todoNo} == selectKey 에서 선택된 todoNo 값을 사용하는 것이다.
	     #{title} == 매핑된 객체에서 title 속성 값을 가져와서 사용하는 것이다.
	     default == 기본값 사용
	     
	     ${} == 동적 테이블 이름이나 칼럼 이름을 사용해야 하는 경우, SQL 특정 구문을 동적으로 변경해야 하는 경우, 
	            사용자가 입력한 값이 신뢰할 수 있고, SQL 인젝션 위험이 없는 경우에 사용한다.
	     	
	     	인젝션 == injection == SQL 에 들어가기 전에, 조작된 쿼리를 삽입하는 것이다.
	     	
	     	order="BEFORE" insert 하기 전에 조회하는 것
	     	order="AFTER" insert 한 다음에 결과를 보는 것
	            
	     #{} == 사용자가 입력한 값을 안전하게 처리해야 하는 경우, 동적 쿼리를 생성하지 않아도 되는 경우 / SQL 인젝션 공격 방지
	      -->
	<insert id="insert" useGeneratedKeys="true">
		<selectKey order="BEFORE" keyProperty="todoNo" resultType="_int">
			SELECT SEQ_TODO_NO.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO TODO
		VALUES(${todoNo}, #{title}, default, ${todoMemberNo})
	</insert>
</mapper>